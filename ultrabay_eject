#!/bin/bash

# Change the following DEVPATH= to match your system, if you want to run this directly instead of having it called by the udev eject script
# To find the right value, insert the UltraBay optical drive and run:
# udevadm info --query=path --name=/dev/sr0 | perl -pe 's!/block/...$!!'
DEVPATH=''

LOG_TARGETS='syslog libnotify'

die() {
	echo "$1" >&2
	exit 1
}

log() {
	msg=$1
	title=$2
	level=$3
	timeout=$4

	for l in $LOG_TARGETS; do
		case $l in
			syslog)
				if [ -n "$level" -a "$level" = "critical" ]; then
				   priority='crit'
			   else
				   priority='notice'
			   fi
				logger -p $priority "ultrabay_eject: $title - $msg" &
				;;
			libnotify)
				su $DISP0_USER -c "notify-send -i media-eject -u $level -t $timeout \"$title\" \"$msg\"" > /dev/null 2>&1 &
				;;
			kde)
				su $DISP0_USER -c "kdialog --icon media-eject --title \"$title\" --passivepopup \"$msg\" $(($timeout / 1000))" > /dev/null 2>&1 &
				
				;;
			*)
				if [ -n "$level" -a "$level" = "critical" ]; then
					echo "$title - $msg" >&1 &
				else
					echo "$title - $msg" &
				fi
				;;
		esac
	done
}

[ -z "$DEVPATH" ] && die "Device path not set"

shopt -s nullglob
export DISPLAY=":0" # required for notify-send
ULTRABAY_SYSDIR="/sys${DEVPATH}"

DISP0_PID=$(pgrep -f "\-${DISPLAY}")
DISP0_USER_PID=$(cat /proc/${DISP0_PID}/task/${DISP0_PID}/children |cut -d' ' -f1)
DISP0_USER=$(cat /proc/${DISP0_USER_PID}/environ |tr '\0' '\n' |grep -e '^USER' |cut -d'=' -f2)
DISP0_USER_HOME=$(cat /proc/${DISP0_USER_PID}/environ |tr '\0' '\n' |grep -e '^HOME' |cut -d'=' -f2)
XAUTHORITY="${DISP0_USER_HOME}/.Xauthority" # also required for notify-send'`]
[ -f "$XAUTHORITY" ] && export XAUTHORITY

# Find generic dock interface for UltraBay
dock=$( /bin/grep -l ata_bay /sys/devices/platform/dock.?/type )
dock=${dock%%/type}
if [ -n "$dock" -a -d "$dock" ]; then
	LOG_TARGETS='syslog' log 'starting eject of $dock'
else
	log "Cannot locate bay dock device" "ThinkPad Ultrabay eject failed" critical 100000 
fi

# Umount the filesystem(s) backed by the given major:minor device(s)
unmount_rdev() { perl - "$@" <<'EOPERL'  # let's do it in Perl
	for $major_minor (@ARGV) {
		$major_minor =~ m/^(\d+):(\d+)$/ or die;
		push(@tgt_rdevs, ($1<<8)|$2);
	}
	# Sort by reverse length of mount point, to unmount sub-directories first
	open MOUNTS,"</proc/mounts" or die "$!";
	@mounts=sort { length($b->[1]) <=> length($a->[1]) } map { [ split ] } <MOUNTS>;
	close MOUNTS;
	foreach $m (@mounts) {
		($dev,$dir)=@$m;
		next unless -b $dev;  $rdev=(stat($dev))[6];
		next unless grep($_==$rdev, @tgt_rdevs);
		system("umount","-v","$dir")==0  or  $bad=1;
		if ($bad == 1) {
			system("logger","ultrabay_eject","ERROR unmounting",$dev,$dir);
		} else {
			system("logger","ultrabay_eject","unmounted",$dev,$dir);
		};
	}
	exit 1 if $bad;
EOPERL
}

# Get the UltraBay's /dev/foo block device node
ultrabay_dev_node() {
	UDEV_PATH="`readlink -e "$ULTRABAY_SYSDIR/block/"*`" || return 1
	UDEV_NAME="`udevadm info --query=name --path=$UDEV_PATH`" || return 1
	echo /dev/$UDEV_NAME
}

if [ $( cat $dock/docked ) == 0 ]; then
	LOG_TARGETS="syslog" log "dock reports empty"
else 
	if [ -d $ULTRABAY_SYSDIR ]; then
		LOG_TARGETS="syslog" log "dock occupied, shutting down storage device $DEVPATH"
		sync
		# Unmount filesystems backed by this device
		## This seems to be very inelegant and prone to failure
		unmount_rdev `cat $ULTRABAY_SYSDIR/block/*/dev     \
				  $ULTRABAY_SYSDIR/block/*/*/dev`  \
		|| {
			echo 2 > /proc/acpi/ibm/beep  # triple error tone
			log "Please do not pull the device, doing so could cause file corruption and possibly hang the system. Unmounting of the filesystem on the ThinkPad Ultrabay device failed. Please put the eject leaver back in place, and try to unmount the filesystem manually. If this succeeds you can try the eject again" "ThinkPad Ultrabay eject failed" critical 100000
			exit 1;
		}
		sync
		# Nicely power off the device
		DEVNODE=`ultrabay_dev_node` && hdparm -Y $DEVNODE
		# Let HAL+KDE notice the unmount and let the disk spin down
		sleep 0.5
		# Unregister this SCSI device:
		sync
		echo 1 > $ULTRABAY_SYSDIR/delete
	else
		log "Bay occupied but incorrect device path" "ThinkPad Ultrabay eject failed" critical 100000 
		echo 2 > /proc/acpi/ibm/beep  # triple error tone
		exit 1
	fi
fi

# We need sleep here so someone can disconnect the bay and the drive
sleep 1

# Turn off power to the UltraBay
LOG_TARGETS="syslog" log "undocking $dock"
echo 1 > $dock/undock

# Tell the user we're OK
echo 12 > /proc/acpi/ibm/beep
log "The ThinkPad Ultrabay device can now safely be removed" "Safe to remove device" normal 10000 
